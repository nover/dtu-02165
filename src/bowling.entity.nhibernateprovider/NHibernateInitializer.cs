using Bowling.Entity.Domain;
using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using FluentNHibernate.Conventions.Helpers;
using NHibernate.Bytecode;
using NHibernate.Cfg;
using NHibernate.Dialect;
using NHibernate.Mapping.ByCode;
using SharpLite.NHibernateProvider;
using SharpLite.NHibernateProvider.ConfigurationCaching;
using System;

namespace TemplateSrc.NHibernateProvider
{
    public class NHibernateInitializer
    {
        public static Configuration Initialize()
        {
            var configuration = new Configuration();
            return Fluently.Configure()
                    .Mappings(cfg =>
                    {
                        cfg.FluentMappings.AddFromAssemblyOf<Member>()
                            .Conventions.AddFromAssemblyOf<Member>()
                            .Conventions.Add(PrimaryKey.Name.Is(x => x.EntityType.Name + "Id"))
                            .Conventions.Add(DefaultCascade.All())
                            .Conventions.Add(ForeignKey.EndsWith("Id"))
                            /**
                             * Set ID as generated by native unless ID is of type string
                             */
                            .Conventions.Add(
                                ConventionBuilder
                                    .Id
                                    .When(
                                        c => c.Expect(
                                            i => !i.Type.Name.Equals(typeof(String).Name)
                                        ),
                                        y => y.GeneratedBy.Native()
                                    )
                                )
                            .Conventions.Add(ConventionBuilder.Id.Always(x => x.Unique()));
                        //.Conventions.Add(Cache.Is(x => x.NonStrictReadWrite()));
                    })
                    .Database(SQLiteConfiguration.Standard.ConnectionString("Data Source=./UnitTestDB;Version=3;New=True"))
                    .ExposeConfiguration(cfg => cfg.CurrentSessionContext<LazySessionContext>())
                    .BuildConfiguration();
        }

        private const string CONFIG_CACHE_KEY = "TemplateSrc";
    }
}